#version 430

layout(local_size_x=32) in;
const uint MAX_PARTICLES_PER_VOXEL = 32;

layout(std430) writeonly buffer densities{ float dns[];};
layout(std430) readonly buffer positions_in{ vec4 pos_in[];};
layout(std430) readonly buffer bucket{ uint bkt[][MAX_PARTICLES_PER_VOXEL];};
uniform uint num_particles;
uniform uint bucket_res;
uniform float re2;
uniform float re9;
uniform float mass;

#define POW3(x) ((x)*(x)*(x))

const float PI = 3.14159265358979323846264338327950288; 

float W(vec3 r){
    const float c = 315.0/(64.0*PI);
    float abs_r2 = dot(r,r);
    float diff_r2 = re2-abs_r2;
    return 0<diff_r2?c*POW3(diff_r2)/re9:0.0;
}

void main(){
    uvec3 GlobalInvocationSize = gl_NumWorkGroups*gl_WorkGroupSize;
    uint threadsTotal = GlobalInvocationSize.x*GlobalInvocationSize.y*GlobalInvocationSize.z;
    uint threadIndex = gl_GlobalInvocationID.z*GlobalInvocationSize.y*GlobalInvocationSize.x
                    +gl_GlobalInvocationID.y*GlobalInvocationSize.x+gl_GlobalInvocationID.x;

    for (uint i = threadIndex; i < num_particles; i+= threadsTotal){
        vec3 pos_i = pos_in[i].xyz;
        ivec3 idx_3d = ivec3(pos_i*float(bucket_res-1));

        float rho = 0.0;
        for (int x_offset=-1; x_offset<=1; x_offset++)
        for (int y_offset=-1; y_offset<=1; y_offset++)
        for (int z_offset=-1; z_offset<=1; z_offset++){
            ivec3 idx_3d_j = idx_3d + ivec3(x_offset, y_offset, z_offset);
            if(all(greaterThanEqual(idx_3d_j, ivec3(0))) && all(lessThan(idx_3d_j, ivec3(bucket_res))))
            {
                uint bkt_j = bucket_res * (bucket_res * idx_3d_j.z + idx_3d_j.y) + idx_3d_j.x;
                for (uint j2 = 0; j2<MAX_PARTICLES_PER_VOXEL; j2++){
                    uint j = bkt[bkt_j][j2];
                    if (j == num_particles) break;
                    rho += mass* W(pos_i - pos_in[j].xyz);
                }
            }
        }
        dns[i] = rho;
    }
}
