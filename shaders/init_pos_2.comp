#version 430

layout(local_size_x=32) in;

layout(std430) writeonly buffer positions_1{ vec4 pos1[];};
layout(std430) writeonly buffer positions_2{ vec4 pos2[];};
uniform uint num_particles;
uniform float dam_fill_rate;

void main(){
    uvec3 GlobalInvocationSize = gl_NumWorkGroups*gl_WorkGroupSize;
    uint threadsTotal = GlobalInvocationSize.x*GlobalInvocationSize.y*GlobalInvocationSize.z;
    uint threadIndex = gl_GlobalInvocationID.z*GlobalInvocationSize.y*GlobalInvocationSize.x
                    +gl_GlobalInvocationID.y*GlobalInvocationSize.x+gl_GlobalInvocationID.x;

    uint num_particles_base = uint(num_particles*0.8);
    uint particle_per_dim = uint(ceil(pow(num_particles_base/dam_fill_rate, 1./3.)));
    uint x_size = uint(ceil(particle_per_dim*dam_fill_rate));
    uint y_size = particle_per_dim;
    uint z_size = particle_per_dim;
    float particle_cube_length = 1.0/float(particle_per_dim);
    for (uint i = threadIndex; i < num_particles; i+= threadsTotal){
        vec4 pos;
        if (i<num_particles_base){
            pos.z = particle_cube_length/2.0 + float(i%z_size) * 1.0/float(z_size);
            pos.y = particle_cube_length/2.0 + float(uint(i/z_size)%y_size) * 1.0/float(y_size);
            pos.x = particle_cube_length/2.0 + float(uint(i/uint(z_size*y_size))) * dam_fill_rate/float(x_size);
            pos.xyz += noise3(i)*(particle_cube_length);
        }
        pos.w = 1.0;
        pos1[i] = pos;
        pos2[i] = pos;
    }
}
