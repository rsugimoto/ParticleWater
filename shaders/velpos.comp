#version 430

layout(local_size_x=32) in;
const uint MAX_PARTICLES_PER_VOXEL = 16;

layout(std430) readonly buffer positions_in{ vec4 pos_in[];};
layout(std430) writeonly buffer positions_out{ vec4 pos_out[];};
layout(std430) readonly buffer densities{ float dns[];};
layout(std430) readonly buffer velocities_in{vec4 vel_in[];};
layout(std430) writeonly buffer velocities_out{vec4 vel_out[];};
layout(std430) readonly buffer bucket{ uint bkt[][MAX_PARTICLES_PER_VOXEL];};
uniform uint num_particles;
uniform uint bucket_res;
uniform double re;
uniform double re6;
uniform float mass;
uniform float timestep;

const vec3 g = vec3(0.0,-9.8,0.0);
const float viscosity = 0.000890;
float k = 286.9/298.0;
float p0 = 101325;
float rho0 = 997.0;

#define POW3(x) ((x)*(x)*(x))

const double PI = 3.14159265358979323846264338327950288; 

dvec3 grad_W_press(dvec3 r){
    const double c = 45.0/PI;
    double abs_r = length(r);
    double diff_r = re-abs_r;
    return abs_r<re?(c/re6)*POW3(diff_r)*r/abs_r:dvec3(0.0);
}

double grad_W_vis(dvec3 r){
    const double c = 45.0/PI;
    double abs_r = length(r);
    return abs_r<re?(c/re6)*(re-abs_r):0.0;
}

void main(){
    uvec3 GlobalInvocationSize = gl_NumWorkGroups*gl_WorkGroupSize;
    uint threadsTotal = GlobalInvocationSize.x*GlobalInvocationSize.y*GlobalInvocationSize.z;
    uint threadIndex = gl_GlobalInvocationID.z*GlobalInvocationSize.y*GlobalInvocationSize.x
                    +gl_GlobalInvocationID.y*GlobalInvocationSize.x+gl_GlobalInvocationID.x;

    for (uint i = threadIndex; i < num_particles; i+= threadsTotal){
        vec3 pos_i = clamp(pos_in[i].xyz, 0.0, 1.0);
        uvec3 idx_3d = uvec3(pos_i*float(bucket_res-1));

        float rho_i = dns[i];
        float p_i = p0 + k*(rho_i - rho0);
        vec4 vel_in_i = vel_in[i];

        dvec3 f_press = dvec3(0.0);
        dvec3 f_vis = dvec3(0.0);
        for (int x_offset=-1; x_offset<=1; x_offset++)
        for (int y_offset=-1; y_offset<=1; y_offset++)
        for (int z_offset=-1; z_offset<=1; z_offset++){
            if (0<=idx_3d.x+x_offset && idx_3d.x+x_offset<bucket_res &&
                0<=idx_3d.y+y_offset && idx_3d.y+y_offset<bucket_res &&
                0<=idx_3d.z+z_offset && idx_3d.z+z_offset<bucket_res )
            {
                uint bkt_j = bucket_res * (bucket_res * (idx_3d.z+z_offset) + (idx_3d.y+y_offset)) + (idx_3d.x+x_offset);
                for (int k = 0; k<MAX_PARTICLES_PER_VOXEL; k++){
                    uint j = bkt[bkt_j][k];
                    if (j == num_particles) break;
                    float rho_j = dns[j];
                    float p_j = p0 + k*(dns[j] - rho0);
                    vec3 pos_j = pos_in[j].xyz;
                    f_press -= double(mass*(p_i+p_j)/(2.0*rho_j))*grad_W_press(pos_j-pos_i);
                    f_vis += double(mass*(vel_in[j].xyz-vel_in_i.xyz)/rho_j)*grad_W_vis(pos_j-pos_i);
                }
            }
        }
  
        f_vis *= double(viscosity);
        vec3 f_gravity = mass*g;

        vec3 f_wall = vec3(0.0);
        vec3 r = vec3(0.0);
        float f_re = float(re);
        if(pos_i.x<f_re) r.x += f_re-pos_i.x;
        if(pos_i.y<f_re) r.y += f_re-pos_i.y;
        if(pos_i.z<f_re) r.z += f_re-pos_i.z;
        if(pos_i.x>1.0-f_re) r.x += 1.0 - pos_i.x - f_re;
        if(pos_i.y>1.0-f_re) r.y += 1.0 - pos_i.y - f_re;
        if(pos_i.z>1.0-f_re) r.z += 1.0 - pos_i.z - f_re;
        vec3 abs_r = abs(r);
        float max_r = max(abs_r.x, max(abs_r.y, abs_r.z));
        if(max_r>0){
            f_wall = r/(timestep*timestep);
        }

        //vec3 f_i = vec3(f_press) + vec3(f_vis) + f_gravity + f_wall;
        vec3 f_i = vec3(f_press) + f_gravity + f_wall;
        vec4 vel_out_i = vel_in_i + (vec4(f_i, 0.0)/mass)*timestep;
        vel_out[i] = vel_out_i;
        vec4 pos_out_i = vec4(pos_i, 1.0) + timestep*vel_out_i;
        pos_out[i] = clamp(pos_out_i, 0.0, 1.0);

        ////test
        // vec3 pos2 = clamp(pos_in[i].xyz, 0.0, 1.0);
        // uvec3 idx_3d2 = uvec3(pos2*float(bucket_res-1));
        // uint bkt_idx = bucket_res * (bucket_res * (idx_3d2.z) + (idx_3d2.y)) + (idx_3d2.x);
        // for(uint i2=0; i2<MAX_PARTICLES_PER_VOXEL; i2++){
        //     if(bkt[bkt_idx][i2] == i){
        //         pos_out[i] = clamp(pos_in[i] - vec4(0,0.1,0,0),0,1);
        //         return;
        //     }
        // }
        // pos_out[i] = pos_in[i];
    }
}