#version 430

layout(local_size_x=32) in;
const uint MAX_PARTICLES_PER_VOXEL = 32;

layout(std430) readonly buffer positions_in{ vec4 pos_in[];};
layout(std430) writeonly buffer positions_out{ vec4 pos_out[];};
layout(std430) readonly buffer densities{ float dns[];};
layout(std430) readonly buffer velocities_in{vec4 vel_in[];};
layout(std430) writeonly buffer velocities_out{vec4 vel_out[];};
layout(std430) readonly buffer bucket{ uint bkt[][MAX_PARTICLES_PER_VOXEL];};
uniform uint num_particles;
uniform uint bucket_res;
uniform float re;
uniform float re6;
uniform float mass;
uniform float timestep;

const vec3 a_gravity = vec3(0.0,-9.8,0.0);
const float viscosity = 0.01;
float k =150.0;
float rho0 = 1.5;

const float stiffness_coeff = 5000.0;
const float damping_coeff = 10.0;

#define POW3(x) ((x)*(x)*(x))

const float PI = 3.14159265358979323846264338327950288; 

vec3 grad_W_press(vec3 r){
    const float c = 45.0/PI;
    float abs_r = length(r);
    float diff_r = re-abs_r;
    return 0<diff_r?(c/re6)*POW3(diff_r)*r/abs_r:vec3(0.0);
}

float grad_W_vis(vec3 r){
    const float c = 45.0/PI;
    float abs_r = length(r);
    return abs_r<re?(c/re6)*(re-abs_r):0.0;
}

void main(){
    uvec3 GlobalInvocationSize = gl_NumWorkGroups*gl_WorkGroupSize;
    uint threadsTotal = GlobalInvocationSize.x*GlobalInvocationSize.y*GlobalInvocationSize.z;
    uint threadIndex = gl_GlobalInvocationID.z*GlobalInvocationSize.y*GlobalInvocationSize.x
                    +gl_GlobalInvocationID.y*GlobalInvocationSize.x+gl_GlobalInvocationID.x;

    for (uint i = threadIndex; i < num_particles; i+= threadsTotal){
        vec3 pos_i = pos_in[i].xyz;
        ivec3 idx_3d = ivec3(pos_i*float(bucket_res-1));

        float rho_i = dns[i];
        float p_i = k*(rho_i - rho0);
        vec4 vel_in_i = vel_in[i];

        vec3 f_press = vec3(0.0);
        vec3 f_vis = vec3(0.0);
        for (int x_offset=-1; x_offset<=1; x_offset++)
        for (int y_offset=-1; y_offset<=1; y_offset++)
        for (int z_offset=-1; z_offset<=1; z_offset++){
            ivec3 idx_3d_j = idx_3d + ivec3(x_offset, y_offset, z_offset);
            if(all(greaterThanEqual(idx_3d_j, ivec3(0))) && all(lessThan(idx_3d_j, ivec3(bucket_res))))
            {
                uint bkt_j = bucket_res * (bucket_res * idx_3d_j.z + idx_3d_j.y) + idx_3d_j.x;
                for (uint j2 = 0; j2<MAX_PARTICLES_PER_VOXEL; j2++){
                    uint j = bkt[bkt_j][j2];
                    if (j == num_particles) break;
                    if (j == i) continue;
                    float rho_j = dns[j];
                    float p_j = k*(rho_j - rho0);
                    vec3 pos_j = pos_in[j].xyz;
                    vec3 pos_ij = pos_i-pos_j;
                    f_press += ((p_i+p_j)/(2.0*rho_j))*grad_W_press(pos_ij);
                    f_vis += ((vel_in[j].xyz-vel_in_i.xyz)/rho_j)*grad_W_vis(pos_ij);
                }
            }
        }
        f_press *= mass*mass/rho_i;
        f_vis *= viscosity*mass*mass/rho_i;

        vec3 f_wall = vec3(0.0);
        vec3 r = vec3(0.0);

        if(pos_i.x<re) r.x += re-pos_i.x;
        else if(pos_i.x>1.0-re) r.x += 1.0 - pos_i.x - re;
        if(pos_i.y<re) r.y += re-pos_i.y;
        else if(pos_i.y>1.0-re) r.y += 1.0 - pos_i.y - re;
        if(pos_i.z<re) r.z += re-pos_i.z;
        else if(pos_i.z>1.0-re) r.z += 1.0 - pos_i.z - re;
        vec3 abs_r = abs(r);
        float max_r = max(abs_r.x, max(abs_r.y, abs_r.z));
        vec3 damp;
        damp.x = (r.x!= 0.0)? damping_coeff: 0.0; 
        damp.y = (r.y!= 0.0)? damping_coeff: 0.0; 
        damp.z = (r.z!= 0.0)? damping_coeff: 0.0; 
        if(max_r>0){
            f_wall = r*stiffness_coeff - dot(damp,vel_in_i.xyz);
            f_wall *= mass;
        }

        vec3 a_i =  a_gravity + (vec3(f_press + f_vis) + f_wall)/mass;

        //Leap-Frog scheme
        vec4 vel_out_i = vel_in_i + vec4(a_i*timestep, 0.0);
        vel_out[i] = vel_out_i;
        vec4 pos_out_i = vec4(pos_i, 1.0) + timestep*vel_out_i;
        pos_out[i] = clamp(pos_out_i, 0.0, 1.0);
    }
}